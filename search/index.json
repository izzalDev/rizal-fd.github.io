[{"content":"Apa itu image compression? Sering kali dalam kehidupan sehari-hari kita menggunakan citra/gambar baik itu untuk keperluan akademik maupun sosial media namun apakah kita tahu bahwa sebenarnya citra digital yang kita gunakan sebenarnya merupakan interpretasi dari matriks, ya matriks yang sering kita pelajari dulu ketika di SMA. Sebuah citra digital merupakan matriks dua hingga tiga dimensi. Untuk citra hitam putih \u0026 grayscale sendiri tersusun dari matriks dua dimensi sedangkan citra berwarna (RGB) tersusun dari matriks tiga dimensi. Tahukan kamu bahwa hasil citra pada kamera sebenarnya berformat RAW?, citra berformat RAW ini memiliki ukuran yang besar sehingga perlu dimampatkan (kompres). Pemampatan ini bertujuan untuk mengurangi ukuran file agar lebih efisien. Secara garis besar ada dua teknik kompresi pada citra, yaitu lossless dan lossy. Pada teknik kompresi lossless citra akan direkonstruksi secara sempurna tanpa mengurangi kualitas citra sedangkan teknik kompresi lossy compression atau juga disebut irreversible compression merupakan teknik kompresi yang menggunakan perkiraan yang tidak tepak dan membuang sebagian data untuk mewakili konten.   Ilustrasi citra digital \nKonsep RLE (Run Length Encoding) RLE (Run Length Encoding) merupakan salah satu teknik kompresi lossless yang paling mudah dipraktikkan. Konsep RLE Compression adalah dengan memeriksa pengulangan nilai pixel yang terjadi berturut-turut. Algoritma ini dapat bekerja dengan efisien pada citra biner. Mari kita ambil contoh citra [ 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 1 1 ] memiiki 21 pixel dan terdiri dari binary. Untuk menggunakan algoritma RLE langkah - langkah yang perlu kita lakukan sebagai berikut.\n Langkah awal, pointer saat ini ada pada pixel pertama yaitu 0 . Kemudian kita kompresi menjadi [01] yang artinya 0 diulang sebanyak 1 kali. Selanjutnya bernilai 1 yang diulang sebanyak 5 kali setelah itu kita gabungkan pada hasil kompresi sebelumnya menjadi [01 15]. Kemudian bernilai 0 yang diulang sebanyak 6 kali dan kita gabungkan dengan hasil kompresi sebelumnya menjadi [01 15 06]. Ulang langkah sebelumnya sampai dengan pixel terakhir. Hasil RLE [01 15 06 13 03 13] Citra sebelumnya memiliki 21 nilai sekarang setelah dikompress menjadi 6 nilai.  Sekarang untuk mendekompresi atau mengembalikan nilai semula yaitu,\n Nilai awal yaitu 01, yang berarti 0 diulang sebanyak satu kali. Menghasilkan [1]. Selanjutnya yaitu 15. Kita lakukan seperti sebelumnya, dan digabung dengan hasil sebelumnya menghasilkan [0 1 1 1 1 1]. Dan seterusnya.    Ilustrasi RLE \nImplementasi pada Python Persiapan Awal Import dependensi dan deklarasi fungsi pendukung yang akan digunakan.\nimport numpy as np import cv2 import matplotlib.pyplot as plt import sys import os # Fungsi untuk menampilkan citra def show(img, figsize=(10, 10), title=\u0026#34;Image\u0026#34;, cmap=\u0026#39;RGB\u0026#39;): figure=plt.figure(figsize=figsize) plt.imshow(img,cmap=cmap) plt.axis(\u0026#39;off\u0026#39;) plt.show()  contoh citra \nMari kita cari tahu ukuran citra diatas dengan python.\n# fungsi untuk menampilkan ukuran file def get_size(filename=\u0026#34;lena.jpg\u0026#34;): stat = os.stat(filename) size=stat.st_size print(size/1024,\u0026#39;KB\u0026#39;) return size get_size() 7.818359375 KB Diketahui bahwa contoh citra memiliki ukuran 7,8KB\nFungsi Encoding Sekarang kita lakukan RLE compression pada contah citra lena dan kita save kedalam file.\n# read graysclae img def RLE_encoding(img, bits=8, binary=True): \u0026#34;\u0026#34;\u0026#34; img: Grayscale img. bits: what will be the maximum run length? 2^bits \u0026#34;\u0026#34;\u0026#34; if binary: ret,img = cv.threshold(img,127,255,cv.THRESH_BINARY+cv.THRESH_OTSU) encoded = [] shape=img.shape count = 0 prev = None fimg = img.flatten() th=127 for pixel in fimg: if binary: if pixel\u0026lt;th: pixel=0 else: pixel=1 if prev==None: prev = pixel count+=1 else: if prev!=pixel: encoded.append((count, prev)) prev=pixel count=1 else: if count\u0026lt;(2**bits)-1: count+=1 else: encoded.append((count, prev)) prev=pixel count=1 encoded.append((count, prev)) return np.array(encoded) # read image as grayscale img = cv.imread(\u0026#39;lena.jpg\u0026#39;,0) encoded = RLE_encoding(img, binary=False) cv.imwrite(\u0026#39;encode.tif\u0026#39;,encoded) Setelah itu kita cek ukuran file setelah di encoding\nget_size(\u0026#39;encoded.tif\u0026#39;) 57.708984375 KB Hasilnya citra grayscale tersebut justru memiliki ukuran yang lebih besar daripada sebelum dilakukan encoding. Mari kita coba kita encoding citra tersebut kedalam citra binary.\nencoded_bin = RLE_encoding(img,binary=True) cv.imwrite(\u0026#39;encoded_bin.tif\u0026#39;,encoded_bin) get_size(\u0026#39;encoded_bin.tif\u0026#39;) 4.322265625 KB Hasilnya ketika dilakukan RLE pada citra binary ukuran file hasil kompresi jauh lebih kecil daripada citra asli.\nFungsi Decoding Untuk menampilkan kembali citra yang sudah diencoding perlu dilakukan decoding terlebih dahulu.\n# Fungsi untuk melakukan decoding def RLE_decode(encoded, shape): decoded=[] for rl in encoded: r,p = rl[0], rl[1] decoded.extend([p]*r) dimg = np.array(decoded).reshape(shape) return dimg decode = RLE_decode(encoded,img.shape) decode_bin = RLE_decode(encoded_bin,img.shape) show(decode,cmap=\u0026#34;gray\u0026#34;) show(decode_bin,cmap=\u0026#34;gray\u0026#34;)  Lena grayscale   Lena binary \nSimpulan Percobaan yang dilakukan ini mungkin memakan banyak waktu dan hasil yang diberikan tidak mengejutkan. Tapi kesimpulan yang dapat diambil dari percobaan ini adalah RLE (Run Length Encoding) dapat bekerja dengan baik dengan ketika:\n Citra yang akan diproses merupakan citra binary Frekuensi piksel pada citra tidak terlalu besar. Menyimpan dengan format TIFF.  Referensi\nGonzalez, Rafael C. 2001. Digital Image Processing Second Edition. Tom Robbins.\nEddine ALAA, Nour, dan Ismail Zine El Abidne. 2021. Introduction to Image Processing with Python. Cadi Ayyad University.\nViper, Quassarian. 2021. Image Compression In Python: Run Length Encoding. https://q-viper.github.io/2021/05/24/coding-run-length-encoding-in-python/ (diakses tanggal 15 Oktober 2021)\nHanifah, Riska. 2017. Image Compression. https://dosen.perbanas.id/image-compression/ (diakses tanggal 15 Oktober 2021)\n","date":"2021-10-14T18:05:40+07:00","permalink":"https://rizal-fd.github.io/p/rle-image-compression/","title":"RLE Image compression"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://rizal-fd.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://rizal-fd.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  bilibilibi Shortcode \r","date":"2019-03-10T00:00:00Z","permalink":"https://rizal-fd.github.io/p/rich-content/","title":"Rich Content"}]